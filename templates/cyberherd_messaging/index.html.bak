{% extends "base.html" %}
{% from "macros.jinja" import window_vars with context %}

{% block page %}
<div id="cyberherd-messaging-app" class="row q-col-gutter-md">
  <div class="col-12">
    <q-card>
      <q-card-section>
        <div class="text-h6">CyberHerd Messaging Extension</div>
      </q-card-section>
      <q-card-section>
        <p>Manage message templates for publishing to Nostr and broadcasting to websockets.</p>
        <p>Other extensions can use the API to publish messages using these templates.</p>
        <p><strong>Debug:</strong> Vue.js loaded: <span id="vue-status">Checking...</span></p>
        <div class="q-mt-sm">
          <div class="row items-center q-col-gutter-sm">
            <div class="col-auto">
              <q-btn color="secondary" outline label="Import Defaults" @click="importDefaults" />
            </div>
            <div class="col-auto">
              <input type="file" @change="onFileSelected" accept=".json,.py,.txt" />
            </div>
            <div class="col-auto">
              <q-btn color="primary" :disable="!uploadFile" label="Upload Templates" @click="importFromFile" />
            </div>
            <div class="col-auto q-ml-lg">
              <q-toggle
                v-model="nostrPublishingEnabled"
                color="green"
                checked-icon="check"
                unchecked-icon="clear"
                @update:model-value="updateSettings"
              >
                <template v-slot:default>
                  Nostr publishing: [[nostrPublishingEnabled ? 'ON' : 'OFF']]
                </template>
              </q-toggle>
            </div>
          </div>
        </div>
      </q-card-section>
    </q-card>
  </div>

  <div class="col-12">
    <q-card>
      <q-card-section>
        <div class="text-h6">Message Templates</div>
      </q-card-section>
      <q-card-section>
        <div class="q-mb-md">
          <div class="row items-center q-col-gutter-sm">
            <div class="col-auto" style="min-width: 200px;">
              <q-select
                v-model="selectedCategory"
                :options="categories"
                label="Select Category"
                filled dense
              />
            </div>
            <div class="col-auto">
              <q-btn 
                size="sm" 
                color="warning" 
                outline 
                label="Rename Category" 
                :disable="!selectedCategory"
                @click="openRenameCategoryDialog"
              />
            </div>
            <div class="col-auto">
              <q-btn 
                size="sm" 
                color="negative" 
                outline 
                label="Delete Category" 
                :disable="!selectedCategory"
                @click="deleteCategory"
              />
            </div>
          </div>
        </div>

        <q-table
          :rows="filteredTemplates"
          :columns="tableColumns"
          row-key="key"
          flat
        >
          <template v-slot:body="props">
            <q-tr :props="props">
              <q-td key="key" :props="props">
                [[props.row.key]]
              </q-td>
              <q-td key="content" :props="props">
                <q-input
                  v-if="props.row.editing"
                  v-model="props.row.content"
                  type="textarea"
                  dense
                  autofocus
                  @blur="saveTemplateInline(props.row)"
                  @keyup.enter.ctrl="saveTemplateInline(props.row)"
                  rows="3"
                />
                <span v-else>[[props.row.content]]</span>
              </q-td>
              <q-td key="actions" :props="props">
                <q-btn 
                  v-if="!props.row.editing"
                  size="sm" 
                  icon="edit" 
                  flat 
                  color="primary" 
                  @click="enableEditInline(props.row)" 
                />
                <q-btn 
                  v-if="props.row.editing"
                  size="sm" 
                  icon="check" 
                  flat 
                  color="positive" 
                  @click="saveTemplateInline(props.row)" 
                />
                <q-btn 
                  v-if="props.row.editing"
                  size="sm" 
                  icon="close" 
                  flat 
                  color="warning" 
                  @click="cancelEditInline(props.row)" 
                />
                <q-btn 
                  v-if="!props.row.editing"
                  size="sm" 
                  icon="delete" 
                  flat 
                  color="negative" 
                  @click="deleteTemplate(props.row)" 
                />
              </q-td>
            </q-tr>
          </template>
        </q-table>

        <!-- Rename Category Dialog -->
        <q-dialog v-model="showRenameCategoryDialog">
          <q-card style="min-width: 350px;">
            <q-card-section>
              <div class="text-h6">Rename Category</div>
            </q-card-section>
            <q-card-section>
              <q-input
                v-model="newCategoryName"
                label="New Category Name"
                filled
                dense
              />
            </q-card-section>
            <q-card-actions align="right">
              <q-btn flat label="Cancel" color="primary" v-close-popup />
              <q-btn 
                flat 
                label="Rename" 
                color="primary" 
                @click="renameCategory" 
                v-close-popup 
              />
            </q-card-actions>
          </q-card>
        </q-dialog>
      </q-card-section>
    </q-card>
  </div>
</div>
{% endblock %}

{% block scripts %} {{ window_vars(user) }}
<script>
  // Create/override the LNbits Vue app in the usual pattern (Vue 3)
  window.app = Vue.createApp({
    el: '#vue',
    mixins: [window.windowMixin],
    delimiters: ['[[', ']]'],
    data() {
      return {
        templates: [],
        categories: [],
        selectedCategory: null,
        uploadFile: null,
        nostrPublishingEnabled: true,
        showRenameCategoryDialog: false,
        newCategoryName: '',
        tableColumns: [
          { name: 'key', label: 'Key', field: 'key', align: 'left' },
          { name: 'content', label: 'Content', field: 'content', align: 'left' },
          { name: 'actions', label: 'Actions', field: 'actions', align: 'right' }
        ]
      }
    },
    created() {
      this.loadTemplates()
      this.loadCategories()
      this.loadSettings()
    },
    mounted() {
      // Update debug status
      const statusEl = document.getElementById('vue-status')
      if (statusEl) {
        statusEl.textContent = 'Loaded successfully'
      }
    },
    computed: {
      filteredTemplates() {
        if (!this.selectedCategory) return this.templates
        return this.templates.filter(t => t.category === this.selectedCategory)
      }
    },
    methods: {
      async loadTemplates() {
        try {
          const response = await LNbits.api.request(
            'GET',
            '/cyberherd_messaging/api/v1/templates',
            this.g.user.wallets[0].adminkey
          )
          this.templates = response.data.templates || []
        } catch (error) {
          console.error('Failed to load templates:', error)
        }
      },
      async loadCategories() {
        try {
          const response = await LNbits.api.request(
            'GET',
            '/cyberherd_messaging/api/v1/templates/categories',
            this.g.user.wallets[0].adminkey
          )
          this.categories = response.data.categories || []
          if (!this.selectedCategory && this.categories.length) {
            this.selectedCategory = this.categories[0]
          }
        } catch (error) {
          console.error('Failed to load categories:', error)
        }
      },
      async loadSettings() {
        try {
          const response = await LNbits.api.request(
            'GET',
            '/cyberherd_messaging/api/v1/settings',
            this.g.user.wallets[0].adminkey
          )
          if (typeof response.data.nostr_publishing_enabled === 'boolean') {
            this.nostrPublishingEnabled = response.data.nostr_publishing_enabled
          }
        } catch (e) { console.error('Failed to load settings', e) }
      },
      async updateSettings() {
        try {
          await LNbits.api.request(
            'PUT',
            '/cyberherd_messaging/api/v1/settings',
            this.g.user.wallets[0].adminkey,
            { nostr_publishing_enabled: this.nostrPublishingEnabled }
          )
        } catch (e) { console.error('Failed to update settings', e) }
      },
      async deleteTemplate(tmpl) {
        if (!confirm('Are you sure you want to delete this template?')) return
        try {
          const response = await LNbits.api.request(
            'DELETE',
            `/cyberherd_messaging/api/v1/templates/${tmpl.category}/${tmpl.key}`,
            this.g.user.wallets[0].adminkey
          )
          await this.loadTemplates()
          await this.loadCategories()
        } catch (error) {
          console.error('Failed to delete template:', error)
          LNbits.utils.notifyApiError(error)
        }
      },
      enableEditInline(tmpl) {
        // Store original content in case user cancels
        tmpl._originalContent = tmpl.content
        tmpl.editing = true
        // Force reactivity
        this.templates = [...this.templates]
      },
      cancelEditInline(tmpl) {
        // Restore original content
        tmpl.content = tmpl._originalContent
        delete tmpl._originalContent
        tmpl.editing = false
        // Force reactivity
        this.templates = [...this.templates]
      },
      async saveTemplateInline(tmpl) {
        if (!tmpl.category || !tmpl.key) return
        try {
          await LNbits.api.request(
            'PUT',
            `/cyberherd_messaging/api/v1/templates/${tmpl.category}/${tmpl.key}`,
            this.g.user.wallets[0].adminkey,
            { 
              category: tmpl.category,
              key: tmpl.key,
              content: tmpl.content 
            }
          )
          delete tmpl._originalContent
          tmpl.editing = false
          // Force reactivity
          this.templates = [...this.templates]
          this.$q.notify({
            type: 'positive',
            message: 'Template updated successfully',
            timeout: 2000
          })
        } catch (error) {
          console.error('Failed to update template:', error)
          LNbits.utils.notifyApiError(error)
        }
      },
      async deleteCategory() {
        if (!this.selectedCategory) return
        if (!confirm(`Are you sure you want to delete all templates in category "${this.selectedCategory}"? This action cannot be undone.`)) return
        try {
          const response = await LNbits.api.request(
            'DELETE',
            `/cyberherd_messaging/api/v1/templates/category/${this.selectedCategory}`,
            this.g.user.wallets[0].adminkey
          )
          console.log(`Deleted ${response.data.deleted} templates`)
          this.selectedCategory = null
          await this.loadTemplates()
          await this.loadCategories()
        } catch (error) {
          console.error('Failed to delete category:', error)
          LNbits.utils.notifyApiError(error)
        }
      },
      openRenameCategoryDialog() {
        this.newCategoryName = this.selectedCategory || ''
        this.showRenameCategoryDialog = true
      },
      async renameCategory() {
        if (!this.selectedCategory || !this.newCategoryName) return
        try {
          const response = await LNbits.api.request(
            'PUT',
            `/cyberherd_messaging/api/v1/templates/category/${this.selectedCategory}/rename`,
            this.g.user.wallets[0].adminkey,
            { new_category: this.newCategoryName }
          )
          console.log(`Renamed ${response.data.renamed} templates to category "${response.data.new_category}"`)
          this.selectedCategory = response.data.new_category
          this.newCategoryName = ''
          await this.loadTemplates()
          await this.loadCategories()
        } catch (error) {
          console.error('Failed to rename category:', error)
          LNbits.utils.notifyApiError(error)
        }
      },
      async importDefaults() {
        try {
          const response = await LNbits.api.request(
            'POST',
            '/cyberherd_messaging/api/v1/templates/defaults/import',
            this.g.user.wallets[0].adminkey
          )
          await this.loadTemplates()
          await this.loadCategories()
        } catch (error) {
          console.error('Failed to import defaults:', error)
          LNbits.utils.notifyApiError(error)
        }
      },
      onFileSelected(e) {
        const files = e.target.files
        this.uploadFile = files && files[0] ? files[0] : null
      },
      async importFromFile() {
        if (!this.uploadFile) return
        try {
          const formData = new FormData()
          formData.append('file', this.uploadFile)
          const response = await LNbits.api.request(
            'POST',
            '/cyberherd_messaging/api/v1/templates/import_file',
            this.g.user.wallets[0].adminkey,
            formData,
            { headers: { 'Content-Type': 'multipart/form-data' } }
          )
          await this.loadTemplates()
          await this.loadCategories()
          if (response.data.categories && response.data.categories.length) {
            this.selectedCategory = response.data.categories[0]
          }
          this.uploadFile = null
        } catch (error) {
          console.error('Failed to import file:', error)
          LNbits.utils.notifyApiError(error)
        }
      }
    }
  })

  if (window.i18n) {
    window.app.use(window.i18n)
  }

  if (window.Quasar) {
    window.app.use(window.Quasar, window.quasarConfig || {})
  }
</script>
{% endblock %}
